// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	context "context"

	wizardworldapi "github.com/kazmerdome/wizworld/internal/actor/wizard-world-api"
	mock "github.com/stretchr/testify/mock"
)

// WizardApiClient is an autogenerated mock type for the WizardApiClient type
type WizardApiClient struct {
	mock.Mock
}

// ListElixirs provides a mock function with given fields: ctx, params
func (_m *WizardApiClient) ListElixirs(ctx context.Context, params wizardworldapi.ListElixirsRequest) ([]wizardworldapi.ElixirResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 []wizardworldapi.ElixirResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, wizardworldapi.ListElixirsRequest) ([]wizardworldapi.ElixirResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, wizardworldapi.ListElixirsRequest) []wizardworldapi.ElixirResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]wizardworldapi.ElixirResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, wizardworldapi.ListElixirsRequest) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIngredients provides a mock function with given fields: ctx
func (_m *WizardApiClient) ListIngredients(ctx context.Context) ([]wizardworldapi.IngredientResponse, error) {
	ret := _m.Called(ctx)

	var r0 []wizardworldapi.IngredientResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]wizardworldapi.IngredientResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []wizardworldapi.IngredientResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]wizardworldapi.IngredientResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWizardApiClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewWizardApiClient creates a new instance of WizardApiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWizardApiClient(t mockConstructorTestingTNewWizardApiClient) *WizardApiClient {
	mock := &WizardApiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
