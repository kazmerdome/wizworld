// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ingredient "github.com/kazmerdome/wizworld/internal/ingredient"
	mock "github.com/stretchr/testify/mock"
)

// IngredientService is an autogenerated mock type for the IngredientService type
type IngredientService struct {
	mock.Mock
}

// GetIngredients provides a mock function with given fields: ctx
func (_m *IngredientService) GetIngredients(ctx context.Context) ([]ingredient.Ingredient, error) {
	ret := _m.Called(ctx)

	var r0 []ingredient.Ingredient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]ingredient.Ingredient, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []ingredient.Ingredient); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ingredient.Ingredient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIngredientService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIngredientService creates a new instance of IngredientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIngredientService(t mockConstructorTestingTNewIngredientService) *IngredientService {
	mock := &IngredientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
